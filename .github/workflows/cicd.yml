name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4
      
      # 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      # 3. Gradle 캐시 설정
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
      
      # 4. Gradle 빌드 (테스트 제외)
      - name: Build with Gradle
        run: ./gradlew build -x test --no-daemon
      
      # 5. Docker Hub 로그인 (main 브랜치 push 시에만 실행)
      - name: Login to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      # 6. Docker 이미지 빌드 및 푸시 (main 브랜치 push 시에만 실행)
      - name: Build and push Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/prompt-config:${{ github.sha }}, ${{ secrets.DOCKER_USERNAME }}/prompt-config:latest
      
      # 7. 서버 배포 (main 브랜치 push 시에만 실행)
      - name: Deploy to server
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          passphrase: ${{ secrets.SERVER_KEY_PASSPHRASE }} # SSH 키 암호 추가
          script: |
            cd /home/yeongbee/promptpj
            
            export MY_PRIVATE_ENCRYPT_KEY2="${{ secrets.MY_PRIVATE_ENCRYPT_KEY2 }}"
            export MY_PRIVATE_KEY="${{ secrets.MY_PRIVATE_KEY }}"
            
            # Docker 로그인
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            
            # Docker Compose v2 명령어 사용 (공백 포함)
            docker compose down || true
            docker pull ${{ secrets.DOCKER_USERNAME }}/prompt-config:latest
            docker compose up -d
            docker image prune -f