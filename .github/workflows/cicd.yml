name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4
#        with:
#          path: /home/yeongbee/promptpj
      
      # 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      # 3. Gradle 캐시 설정
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
      
      # 4. Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew build -x test --no-daemon
        working-directory: /home/yeongbee/promptpj
      
      # 5. Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      # 6. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: /home/yeongbee/promptpj
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/prompt-config:latest
      
      # 7. 서버 배포 (SSH를 통한 배포)
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            # 기존 컨테이너 중지 및 제거
            docker-compose down || true
            
            # 최신 이미지 풀
            docker pull ${{ secrets.DOCKER_USERNAME }}/prompt-config:latest
            
            # docker-compose 파일이 있는 디렉토리로 이동
            cd /home/yeongbee/promptpj
            
            # 환경변수 설정 (필요시)
            export MY_PRIVATE_ENCRYPT_KEY2="${{ secrets.MY_PRIVATE_ENCRYPT_KEY2 }}"
            export MY_PRIVATE_KEY="${{ secrets.MY_PRIVATE_KEY }}"
            
            # 컨테이너 시작
            docker-compose up -d
            
            # 사용하지 않는 이미지 정리
            docker image prune -f
#1